// Code generated by goyacc -o parser.go spl.y. DO NOT EDIT.

//line spl.y:1

package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"strings"
	"sync/atomic"
)

//line spl.y:2

var (
	ResultAST   *ASTNode
	nodeCounter int64
)

func nextID() int64 {
	return atomic.AddInt64(&nodeCounter, 1)
}

// Base AST ASTNode
type ASTNode struct {
	ID       int64
	Type     string
	Name     string
	Children []*ASTNode
}

func NewNode(nodeType, name string, children ...*ASTNode) *ASTNode {
	return &ASTNode{
		ID:       nextID(),
		Type:     nodeType,
		Name:     name,
		Children: children,
	}
}

func PrintAST(node *ASTNode, indent int) {
	if node == nil {
		return
	}
	fmt.Printf("%s[%d] %s: %s\n",
		strings.Repeat("  ", indent), node.ID, node.Type, node.Name)
	for _, c := range node.Children {
		PrintAST(c, indent+1)
	}
}

//line spl.y:46
type yySymType struct {
	yys  int
	Str  string
	node *ASTNode
}

const (
	GLOB      = 57346
	PROC      = 57347
	FUNC      = 57348
	MAIN      = 57349
	LOCAL     = 57350
	VAR       = 57351
	RETURN    = 57352
	HALT      = 57353
	PRINT     = 57354
	WHILE     = 57355
	DO        = 57356
	UNTIL     = 57357
	IF        = 57358
	ELSE      = 57359
	SEMICOLON = 57360
	LPAREN    = 57361
	RPAREN    = 57362
	LBRACE    = 57363
	RBRACE    = 57364
	ASSIGN    = 57365
	NEG       = 57366
	NOT       = 57367
	EQ        = 57368
	GT        = 57369
	OR        = 57370
	AND       = 57371
	PLUS      = 57372
	MINUS     = 57373
	MULT      = 57374
	DIV       = 57375
	IDENT     = 57376
	NUMBER    = 57377
	STRING    = 57378
)

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"GLOB",
	"PROC",
	"FUNC",
	"MAIN",
	"LOCAL",
	"VAR",
	"RETURN",
	"HALT",
	"PRINT",
	"WHILE",
	"DO",
	"UNTIL",
	"IF",
	"ELSE",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"ASSIGN",
	"NEG",
	"NOT",
	"EQ",
	"GT",
	"OR",
	"AND",
	"PLUS",
	"MINUS",
	"MULT",
	"DIV",
	"IDENT",
	"NUMBER",
	"STRING",
}

var yyStatenames = [...]string{}

const (
	yyEofCode          = 1
	yyErrCode          = 2
	yyInitialStackSize = 16
)

//line spl.y:202

func Parse(lex yyLexer) (*ASTNode, error) {
	if yyParse(lex) != 0 {
		return nil, fmt.Errorf("syntax error")
	}

	// If you stored the result on your lexer (recommended)
	if l, ok := lex.(*LexerAdapter); ok {
		return l.AST, nil
	}

	return nil, fmt.Errorf("no result produced")
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 57,
	19, 5,
	-2, 4,
}

const yyPrivate = 57344

const yyLast = 146

var yyAct = [...]int8{
	68, 49, 80, 53, 5, 4, 5, 33, 72, 6,
	20, 8, 74, 14, 13, 71, 13, 25, 21, 6,
	69, 67, 24, 6, 69, 29, 27, 6, 69, 73,
	27, 19, 122, 21, 115, 74, 111, 107, 120, 21,
	51, 52, 59, 60, 31, 61, 58, 92, 5, 41,
	57, 69, 48, 62, 99, 100, 101, 102, 103, 104,
	105, 106, 77, 57, 36, 58, 79, 46, 45, 37,
	76, 30, 15, 7, 90, 82, 58, 89, 58, 91,
	83, 84, 66, 86, 75, 58, 96, 47, 44, 39,
	74, 58, 108, 78, 97, 87, 88, 38, 110, 28,
	81, 22, 10, 3, 117, 6, 69, 113, 116, 112,
	93, 94, 40, 23, 95, 70, 32, 17, 64, 119,
	114, 58, 121, 118, 109, 81, 11, 63, 43, 34,
	35, 18, 9, 2, 98, 85, 65, 56, 55, 16,
	54, 50, 42, 26, 12, 1,
}

var yyPact = [...]int16{
	129, -1000, 82, -25, 51, -25, -1000, 127, -1000, 81,
	-21, 50, -21, 98, -1000, 125, -1000, -25, 80, 93,
	-1000, -25, -21, 78, -25, 49, -21, 97, 121, -1000,
	123, -1000, -25, 47, 76, 68, 92, -1000, -25, 119,
	67, 46, 45, 66, 121, 29, -1000, -25, 117, -1000,
	100, -1000, -15, 96, -1000, -1000, -1000, -1000, -8, -7,
	63, -7, 40, -11, 29, -1000, -1000, -1000, -1000, -1000,
	-11, 16, 60, -1000, 71, 29, 53, 29, 25, -1000,
	90, -11, 95, -1000, 29, -7, 28, -1000, -1000, 15,
	29, -1000, -1000, -1000, -11, -11, 14, 89, -7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, 12, -1000,
	88, -1000, -1000, 84, -7, 102, -1000, -1000, -1000, 17,
	29, 10, -1000,
}

var yyPgo = [...]uint8{
	0, 145, 5, 0, 3, 126, 144, 17, 143, 7,
	31, 10, 142, 29, 1, 141, 140, 138, 137, 136,
	2, 8, 135, 134,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 4, 5, 5, 6, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 12, 13,
	13, 14, 14, 15, 15, 15, 15, 15, 15, 16,
	16, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	20, 21, 21, 21, 22, 22, 23, 23, 23, 23,
	23, 23, 23, 23,
}

var yyR2 = [...]int8{
	0, 16, 0, 2, 1, 1, 0, 2, 7, 0,
	2, 9, 5, 1, 0, 1, 2, 3, 5, 1,
	1, 2, 3, 1, 2, 4, 1, 1, 1, 6,
	3, 5, 6, 5, 9, 1, 1, 0, 1, 2,
	3, 1, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, 4, 21, -2, -3, 34, 22, -2, 5,
	21, -5, -6, -4, 34, 22, -5, 19, 6, -10,
	-11, -3, 21, 20, -3, -7, -8, -4, 21, -3,
	22, -7, 19, -9, 8, 7, -10, 22, 21, 21,
	20, -11, -12, 9, 21, 22, 22, 21, -9, -14,
	-15, 11, 12, -4, -16, -17, -18, 34, -3, 13,
	14, 16, -2, 10, 18, -19, -13, 36, -3, 35,
	19, 23, -21, -13, 19, 21, -21, 22, -13, -14,
	-20, -13, -4, -21, 21, -22, -21, 24, 25, -14,
	21, -14, 22, 20, -13, 19, -14, -21, -23, 26,
	27, 28, 29, 30, 31, 32, 33, 22, -14, -13,
	-20, 22, 20, -21, 15, 22, 20, 20, -21, 17,
	21, -14, 22,
}

var yyDef = [...]int8{
	0, -2, 0, 2, 0, 2, 4, 0, 3, 0,
	6, 0, 6, 0, 5, 0, 7, 14, 0, 0,
	13, 15, 9, 0, 16, 0, 9, 0, 0, 17,
	0, 10, 14, 0, 0, 0, 0, 8, 14, 0,
	0, 0, 0, 0, 0, 0, 1, 2, 0, 12,
	0, 23, 0, 0, 26, 27, 28, -2, 0, 0,
	0, 0, 0, 0, 21, 24, 35, 36, 19, 20,
	37, 0, 0, 41, 0, 0, 0, 0, 0, 22,
	0, 38, 0, 30, 0, 0, 0, 44, 45, 0,
	0, 18, 11, 25, 39, 37, 0, 0, 0, 46,
	47, 48, 49, 50, 51, 52, 53, 0, 0, 40,
	0, 31, 42, 0, 0, 33, 29, 43, 32, 0,
	0, 0, 34,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 4
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-16 : yypt+1]
//line spl.y:79
		{
			yyVAL.node = NewNode("SPL_PROG", "", yyDollar[3].node, yyDollar[7].node, yyDollar[11].node, yyDollar[15].node)
			ResultAST = yyVAL.node
			yylex.(*LexerAdapter).AST = ResultAST
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:87
		{
			yyVAL.node = NewNode("VARIABLES", "empty")
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:88
		{
			yyVAL.node = NewNode("VARIABLES", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:91
		{
			yyVAL.node = NewNode("VAR", yyDollar[1].Str)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:93
		{
			yyVAL.node = NewNode("NAME", yyDollar[1].Str)
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:96
		{
			yyVAL.node = NewNode("PROCDEFS", "empty")
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:97
		{
			yyVAL.node = NewNode("PROCDEFS", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line spl.y:102
		{
			yyVAL.node = NewNode("PDEF", "", yyDollar[1].node, yyDollar[3].node, yyDollar[6].node)
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:106
		{
			yyVAL.node = NewNode("FUNCDEFS", "empty")
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:107
		{
			yyVAL.node = NewNode("FUNCDEFS", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-9 : yypt+1]
//line spl.y:112
		{
			yyVAL.node = NewNode("FDEF", "", yyDollar[1].node, yyDollar[3].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:117
		{
			yyVAL.node = NewNode("BODY", "", yyDollar[3].node, yyDollar[5].node)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:120
		{
			yyVAL.node = NewNode("PARAM", "", yyDollar[1].node)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:123
		{
			yyVAL.node = NewNode("MAXTHREE", "empty")
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:124
		{
			yyVAL.node = NewNode("MAXTHREE", "", yyDollar[1].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:125
		{
			yyVAL.node = NewNode("MAXTHREE", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:126
		{
			yyVAL.node = NewNode("MAXTHREE", "", yyDollar[1].node, yyDollar[2].node, yyDollar[3].node)
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:131
		{
			yyVAL.node = NewNode("MAINPROG", "", yyDollar[3].node, yyDollar[5].node)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:135
		{
			yyVAL.node = NewNode("ATOM", "Var", yyDollar[1].node)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:136
		{
			yyVAL.node = NewNode("ATOM", yyDollar[1].Str)
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:140
		{
			yyVAL.node = NewNode("ALGO", "", yyDollar[1].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:141
		{
			yyVAL.node = NewNode("ALGO", "", yyDollar[1].node, yyDollar[3].node)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:145
		{
			yyVAL.node = NewNode("INSTR", "halt")
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:146
		{
			yyVAL.node = NewNode("INSTR", "print", yyDollar[2].node)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line spl.y:147
		{
			yyVAL.node = NewNode("INSTR", "call", yyDollar[1].node, yyDollar[3].node)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:148
		{
			yyVAL.node = NewNode("INSTR", "assign", yyDollar[1].node)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:149
		{
			yyVAL.node = NewNode("INSTR", "loop", yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:150
		{
			yyVAL.node = NewNode("INSTR", "branch", yyDollar[1].node)
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line spl.y:154
		{
			yyVAL.node = NewNode("ASSIGN", "call", yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:155
		{
			yyVAL.node = NewNode("ASSIGN", "", yyDollar[1].node, yyDollar[3].node)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:159
		{
			yyVAL.node = NewNode("LOOP", "while", yyDollar[2].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line spl.y:160
		{
			yyVAL.node = NewNode("LOOP", "do", yyDollar[3].node, yyDollar[6].node)
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:164
		{
			yyVAL.node = NewNode("BRANCH", "if", yyDollar[2].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
//line spl.y:165
		{
			yyVAL.node = NewNode("BRANCH", "ifelse", yyDollar[2].node, yyDollar[4].node, yyDollar[8].node)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:169
		{
			yyVAL.node = NewNode("OUTPUT", "atom", yyDollar[1].node)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:170
		{
			yyVAL.node = NewNode("OUTPUT", yyDollar[1].Str)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:174
		{
			yyVAL.node = NewNode("INPUT", "empty")
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:175
		{
			yyVAL.node = NewNode("INPUT", "", yyDollar[1].node)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:176
		{
			yyVAL.node = NewNode("INPUT", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:177
		{
			yyVAL.node = NewNode("INPUT", "", yyDollar[1].node, yyDollar[2].node, yyDollar[3].node)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:181
		{
			yyVAL.node = NewNode("TERM", "atom", yyDollar[1].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line spl.y:182
		{
			yyVAL.node = NewNode("TERM", "unop", yyDollar[2].node, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:183
		{
			yyVAL.node = NewNode("TERM", "binop", yyDollar[2].node, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:187
		{
			yyVAL.node = NewNode("UNOP", yyDollar[1].Str)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:188
		{
			yyVAL.node = NewNode("UNOP", yyDollar[1].Str)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:192
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:193
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:194
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:195
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:196
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:197
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:198
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:199
		{
			yyVAL.node = NewNode("BINOP", yyDollar[1].Str)
		}
	}
	goto yystack /* stack new state and value */
}
