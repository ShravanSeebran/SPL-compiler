// Code generated by goyacc -o parser.go spl.y. DO NOT EDIT.

//line spl.y:1

package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"strings"
	"sync/atomic"
)

//line spl.y:3

var ResultAST *ASTNode
var nodeCounter int64

func nextID() int64 {
	return atomic.AddInt64(&nodeCounter, 1)
}

// Base AST ASTNode
type ASTNode struct {
	ID       int64
	Type     string
	Name     string
	Children []*ASTNode
}

func NewNode(nodeType, name string, children ...*ASTNode) *ASTNode {
	return &ASTNode{
		ID:       nextID(),
		Type:     nodeType,
		Name:     name,
		Children: children,
	}
}

func PrintAST(node *ASTNode, indent int) {
	if node == nil {
		return
	}
	fmt.Printf("%s[%d] %s: %s\n",
		strings.Repeat("  ", indent), node.ID, node.Type, node.Name)
	for _, c := range node.Children {
		PrintAST(c, indent+1)
	}
}

//line spl.y:46
type YySymType struct {
	yys  int
	Str  string
	node *ASTNode
}

const GLOB = 57346
const LOCAL = 57347
const VAR_KW = 57348
const PROC_KW = 57349
const FUNC_KW = 57350
const MAIN_KW = 57351
const RETURN = 57352
const HALT = 57353
const PRINT = 57354
const WHILE = 57355
const DO = 57356
const UNTIL = 57357
const IF = 57358
const ELSE = 57359
const NEG = 57360
const NOT = 57361
const EQ = 57362
const GREATER = 57363
const OR = 57364
const AND = 57365
const PLUS = 57366
const MINUS = 57367
const MULT = 57368
const DIV = 57369
const IDENT = 57370
const NUMBER = 57371
const STRING = 57372

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"GLOB",
	"LOCAL",
	"VAR_KW",
	"PROC_KW",
	"FUNC_KW",
	"MAIN_KW",
	"RETURN",
	"HALT",
	"PRINT",
	"WHILE",
	"DO",
	"UNTIL",
	"IF",
	"ELSE",
	"NEG",
	"NOT",
	"EQ",
	"GREATER",
	"OR",
	"AND",
	"PLUS",
	"MINUS",
	"MULT",
	"DIV",
	"IDENT",
	"NUMBER",
	"STRING",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'='",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line spl.y:216

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 58,
	33, 5,
	-2, 4,
}

const yyPrivate = 57344

const yyLast = 149

var yyAct = [...]int8{
	69, 49, 74, 81, 5, 4, 5, 51, 73, 33,
	20, 8, 72, 65, 64, 54, 6, 70, 21, 88,
	89, 75, 24, 119, 118, 29, 13, 114, 13, 6,
	70, 58, 70, 21, 75, 96, 75, 71, 27, 21,
	94, 40, 27, 23, 32, 17, 59, 124, 5, 41,
	19, 117, 113, 63, 48, 110, 67, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 59, 78, 6, 70,
	68, 77, 122, 80, 82, 46, 45, 59, 90, 59,
	92, 84, 93, 36, 87, 95, 59, 97, 83, 37,
	30, 15, 59, 109, 7, 98, 91, 85, 111, 82,
	112, 52, 53, 60, 61, 76, 62, 47, 115, 44,
	39, 38, 28, 22, 10, 3, 6, 70, 58, 6,
	14, 25, 121, 59, 123, 120, 116, 11, 79, 35,
	18, 9, 43, 34, 2, 99, 86, 66, 57, 56,
	16, 55, 50, 42, 26, 12, 1, 0, 31,
}

var yyPact = [...]int16{
	130, -1000, 84, 91, 62, 91, -1000, 124, -1000, 83,
	92, 59, 92, 12, -1000, 122, -1000, 91, 82, 9,
	-1000, 91, 92, 81, 91, 58, 92, 11, 128, -1000,
	120, -1000, 91, 57, 80, 79, 7, -1000, 91, 126,
	78, 44, 43, 76, 128, 90, -1000, 91, -21, -1000,
	-22, -1000, -1000, 40, 4, -1000, -1000, -1000, -1000, -24,
	-12, 74, -12, 35, 118, 90, -1000, -1000, -1000, -1000,
	-1000, 88, 3, 66, -1000, 1, 90, 65, 90, 88,
	-1000, 6, 88, 2, -1000, 90, -12, 37, -1000, -1000,
	33, 90, -1000, 23, -1000, 88, 88, 20, -7, -12,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 111, 19,
	-1000, -1000, -10, -1000, -1000, -11, -12, 105, -1000, -1000,
	-1000, 41, 90, 15, -1000,
}

var yyPgo = [...]uint8{
	0, 146, 5, 0, 127, 145, 121, 144, 9, 50,
	10, 143, 2, 1, 142, 7, 141, 139, 138, 137,
	3, 8, 136, 135, 15,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 24, 4, 4, 5, 6,
	6, 7, 8, 9, 10, 10, 10, 10, 11, 12,
	12, 13, 14, 14, 15, 15, 15, 15, 15, 15,
	16, 16, 17, 17, 18, 18, 19, 19, 20, 20,
	20, 20, 21, 21, 21, 22, 22, 23, 23, 23,
	23, 23, 23, 23, 23,
}

var yyR2 = [...]int8{
	0, 16, 0, 2, 1, 1, 0, 2, 7, 0,
	2, 10, 5, 1, 0, 1, 2, 3, 5, 1,
	1, 1, 1, 3, 1, 2, 4, 1, 1, 1,
	6, 3, 5, 6, 5, 9, 1, 1, 0, 1,
	2, 3, 1, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, 4, 31, -2, -3, 28, 32, -2, 7,
	31, -4, -5, -24, 28, 32, -4, 33, 8, -9,
	-10, -3, 31, 34, -3, -6, -7, -24, 31, -3,
	32, -6, 33, -8, 5, 9, -9, 32, 31, 31,
	34, -10, -11, 6, 31, 32, 32, 31, -8, -13,
	-14, -15, 11, 12, -24, -16, -17, -18, 28, -3,
	13, 14, 16, -2, 35, 35, -19, -12, 30, -3,
	29, 33, 36, -21, -12, 33, 31, -21, 32, 10,
	-15, -20, -12, -24, -21, 31, -22, -21, 18, 19,
	-13, 31, -13, -12, 34, -12, 33, -13, -21, -23,
	20, 21, 22, 23, 24, 25, 26, 27, 32, -13,
	32, -12, -20, 32, 34, -21, 15, 32, 34, 34,
	-21, 17, 31, -13, 32,
}

var yyDef = [...]int8{
	0, -2, 0, 2, 0, 2, 4, 0, 3, 0,
	6, 0, 6, 0, 5, 0, 7, 14, 0, 0,
	13, 15, 9, 0, 16, 0, 9, 0, 0, 17,
	0, 10, 14, 0, 0, 0, 0, 8, 14, 0,
	0, 0, 0, 0, 0, 0, 1, 2, 0, 12,
	21, 22, 24, 0, 0, 27, 28, 29, -2, 0,
	0, 0, 0, 0, 0, 0, 25, 36, 37, 19,
	20, 38, 0, 0, 42, 0, 0, 0, 0, 0,
	23, 0, 39, 0, 31, 0, 0, 0, 45, 46,
	0, 0, 18, 0, 26, 40, 38, 0, 0, 0,
	47, 48, 49, 50, 51, 52, 53, 54, 0, 0,
	11, 41, 0, 32, 43, 0, 0, 34, 30, 44,
	33, 0, 0, 0, 35,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	33, 34, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 35,
	3, 36, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 3, 32,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *YySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  YySymType
	stack [yyInitialStackSize]YySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *YySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func YyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL YySymType
	var yyDollar []YySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]YySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]YySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-16 : yypt+1]
//line spl.y:82
		{
			yyVAL.node = NewNode("spl_prog", "SPL Program", yyDollar[3].node, yyDollar[7].node, yyDollar[11].node, yyDollar[15].node)
			ResultAST = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:89
		{
			yyVAL.node = NewNode("variables", "empty")
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:90
		{
			yyVAL.node = NewNode("variables", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:94
		{
			yyVAL.node = NewNode("var", yyDollar[1].Str)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:98
		{
			yyVAL.node = NewNode("name", yyDollar[1].Str)
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:102
		{
			yyVAL.node = NewNode("procdefs", "empty")
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:103
		{
			yyVAL.node = NewNode("procdefs", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line spl.y:108
		{
			yyVAL.node = NewNode("pdef", "", yyDollar[1].node, yyDollar[3].node, yyDollar[6].node)
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:112
		{
			yyVAL.node = NewNode("funcdefs", "empty")
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:113
		{
			yyVAL.node = NewNode("funcdefs", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-10 : yypt+1]
//line spl.y:118
		{
			yyVAL.node = NewNode("fdef", "", yyDollar[1].node, yyDollar[3].node, yyDollar[6].node, yyDollar[9].node)
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:123
		{
			yyVAL.node = NewNode("body", "", yyDollar[3].node, yyDollar[5].node)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:127
		{
			yyVAL.node = NewNode("param", "", yyDollar[1].node)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:131
		{
			yyVAL.node = NewNode("maxthree", "empty")
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:132
		{
			yyVAL.node = NewNode("maxthree", "", yyDollar[1].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:133
		{
			yyVAL.node = NewNode("maxthree", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:134
		{
			yyVAL.node = NewNode("maxthree", "", yyDollar[1].node, yyDollar[2].node, yyDollar[3].node)
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:139
		{
			yyVAL.node = NewNode("mainprog", "", yyDollar[3].node, yyDollar[5].node)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:143
		{
			yyVAL.node = NewNode("atom", "", yyDollar[1].node)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:144
		{
			yyVAL.node = NewNode("atom", yyDollar[1].Str)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:148
		{
			yyVAL.node = NewNode("algo", "", yyDollar[1].node)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:152
		{
			yyVAL.node = NewNode("instr_list", "", yyDollar[1].node)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:153
		{
			yyVAL.node = NewNode("instr_list", "", yyDollar[1].node, yyDollar[3].node)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:157
		{
			yyVAL.node = NewNode("instr", "HALT")
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:158
		{
			yyVAL.node = NewNode("instr", "PRINT", yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line spl.y:159
		{
			yyVAL.node = NewNode("instr", "", NewNode("call", "", yyDollar[1].node, yyDollar[3].node))
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:160
		{
			yyVAL.node = NewNode("instr", "", yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:161
		{
			yyVAL.node = NewNode("instr", "", yyDollar[1].node)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:162
		{
			yyVAL.node = NewNode("instr", "", yyDollar[1].node)
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line spl.y:166
		{
			yyVAL.node = NewNode("assign", "", yyDollar[1].node, NewNode("call", "", yyDollar[3].node, yyDollar[5].node))
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:169
		{
			yyVAL.node = NewNode("assign", "", yyDollar[1].node, yyDollar[3].node)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:173
		{
			yyVAL.node = NewNode("loop", "while", yyDollar[2].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line spl.y:174
		{
			yyVAL.node = NewNode("loop", "do_until", yyDollar[3].node, yyDollar[6].node)
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:178
		{
			yyVAL.node = NewNode("branch", "if", yyDollar[2].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line spl.y:179
		{
			yyVAL.node = NewNode("branch", "if_else", yyDollar[2].node, yyDollar[4].node, yyDollar[8].node)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:183
		{
			yyVAL.node = NewNode("output", "", yyDollar[1].node)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:184
		{
			yyVAL.node = NewNode("output", yyDollar[1].Str)
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line spl.y:188
		{
			yyVAL.node = NewNode("input", "empty")
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:189
		{
			yyVAL.node = NewNode("input", "", yyDollar[1].node)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line spl.y:190
		{
			yyVAL.node = NewNode("input", "", yyDollar[1].node, yyDollar[2].node)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line spl.y:191
		{
			yyVAL.node = NewNode("input", "", yyDollar[1].node, yyDollar[2].node, yyDollar[3].node)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:195
		{
			yyVAL.node = NewNode("term", "", yyDollar[1].node)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line spl.y:196
		{
			yyVAL.node = NewNode("term", "", yyDollar[2].node, yyDollar[3].node)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line spl.y:197
		{
			yyVAL.node = NewNode("term", "", yyDollar[2].node, yyDollar[3].node, yyDollar[4].node)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:201
		{
			yyVAL.node = NewNode("unop", "neg")
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:202
		{
			yyVAL.node = NewNode("unop", "not")
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:206
		{
			yyVAL.node = NewNode("binop", "eq")
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:207
		{
			yyVAL.node = NewNode("binop", "greater")
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:208
		{
			yyVAL.node = NewNode("binop", "or")
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:209
		{
			yyVAL.node = NewNode("binop", "and")
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:210
		{
			yyVAL.node = NewNode("binop", "plus")
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:211
		{
			yyVAL.node = NewNode("binop", "minus")
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:212
		{
			yyVAL.node = NewNode("binop", "mult")
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line spl.y:213
		{
			yyVAL.node = NewNode("binop", "div")
		}
	}
	goto yystack /* stack new state and value */
}
